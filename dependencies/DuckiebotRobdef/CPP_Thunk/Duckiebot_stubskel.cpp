//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "Duckiebot_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace Duckiebot
{
std::string DuckiebotFactory::GetServiceName()
{
return "Duckiebot";
}
std::string DuckiebotFactory::DefString()
{
std::string out(
"# The main service definition.\n"
"# Will store only structs/Constants that are common to other services.\n"
"\n"
"service Duckiebot\n"
"\n"
"option version 0.8\n"
"\n"
"option constant uint8 WHITE 0\n"
"option constant uint8 YELLOW 1\n"
"option constant uint8 RED 2\n"
"\n"
"struct Image\n"
"field string format\n"
"field int32 width\n"
"field int32 height\n"
"field uint8[] data\n"
"end struct\n"
"\n"
"struct CameraInfo\n"
"field int32 width\n"
"field int32 height\n"
"field string distortion_model\n"
"field double[] D\n"
"field double[9] K\n"
"field double[9] R\n"
"field double[12] P\n"
"end struct\n"
"\n"
"struct Vector2D\n"
"field double x\n"
"field double y\n"
"end struct\n"
"\n"
"struct Point\n"
"field double x\n"
"field double y\n"
"field double z\n"
"end struct\n"
"\n"
"struct Segment\n"
"field uint8 color\n"
"field Vector2D{list} pixels_normalized\n"
"field Vector2D normal\n"
"field Point{list} points\n"
"end struct\n"
"\n"
"struct Pixel\n"
"field int32 u\n"
"field int32 v\n"
"end struct\n"
"\n"
"\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> DuckiebotFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="Image") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<Image_stub>(GetNode()));
if (objecttype=="CameraInfo") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<CameraInfo_stub>(GetNode()));
if (objecttype=="Vector2D") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<Vector2D_stub>(GetNode()));
if (objecttype=="Point") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<Point_stub>(GetNode()));
if (objecttype=="Segment") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<Segment_stub>(GetNode()));
if (objecttype=="Pixel") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<Pixel_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> DuckiebotFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "Duckiebot") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> DuckiebotFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "Duckiebot") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> DuckiebotFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "Duckiebot") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> DuckiebotFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "Duckiebot") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void DuckiebotFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "Duckiebot") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> DuckiebotFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "Duckiebot") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Image_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<Image > s2=RobotRaconteur::rr_cast<Image >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("format",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(s2->format))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("height",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->height))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("data",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->data)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("Duckiebot.Image",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> Image_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<Image > ret=RR_MAKE_SHARED<Image >();
ret->format=RobotRaconteur::RRArrayToString(RobotRaconteur::MessageElement::FindElement(m->Elements,"format")->CastData<RobotRaconteur::RRArray<char> >());
ret->width=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->height=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"height")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->data=RobotRaconteur::MessageElement::FindElement(m->Elements,"data")->CastData<RobotRaconteur::RRArray<uint8_t > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> CameraInfo_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<CameraInfo > s2=RobotRaconteur::rr_cast<CameraInfo >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("height",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->height))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("distortion_model",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(s2->distortion_model))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("D",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->D)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("K",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->K)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("R",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->R)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("P",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->P)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("Duckiebot.CameraInfo",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> CameraInfo_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<CameraInfo > ret=RR_MAKE_SHARED<CameraInfo >();
ret->width=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->height=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"height")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->distortion_model=RobotRaconteur::RRArrayToString(RobotRaconteur::MessageElement::FindElement(m->Elements,"distortion_model")->CastData<RobotRaconteur::RRArray<char> >());
ret->D=RobotRaconteur::MessageElement::FindElement(m->Elements,"D")->CastData<RobotRaconteur::RRArray<double > >();
ret->K=RobotRaconteur::MessageElement::FindElement(m->Elements,"K")->CastData<RobotRaconteur::RRArray<double > >();
ret->R=RobotRaconteur::MessageElement::FindElement(m->Elements,"R")->CastData<RobotRaconteur::RRArray<double > >();
ret->P=RobotRaconteur::MessageElement::FindElement(m->Elements,"P")->CastData<RobotRaconteur::RRArray<double > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Vector2D_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<Vector2D > s2=RobotRaconteur::rr_cast<Vector2D >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("x",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->x))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("y",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->y))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("Duckiebot.Vector2D",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> Vector2D_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<Vector2D > ret=RR_MAKE_SHARED<Vector2D >();
ret->x=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"x")->CastData<RobotRaconteur::RRArray<double > >());
ret->y=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"y")->CastData<RobotRaconteur::RRArray<double > >());
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Point_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<Point > s2=RobotRaconteur::rr_cast<Point >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("x",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->x))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("y",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->y))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("z",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->z))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("Duckiebot.Point",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> Point_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<Point > ret=RR_MAKE_SHARED<Point >();
ret->x=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"x")->CastData<RobotRaconteur::RRArray<double > >());
ret->y=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"y")->CastData<RobotRaconteur::RRArray<double > >());
ret->z=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"z")->CastData<RobotRaconteur::RRArray<double > >());
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Segment_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<Segment > s2=RobotRaconteur::rr_cast<Segment >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("color",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->color))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("pixels_normalized",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackListType<Vector2D  >(s2->pixels_normalized))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("normal",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(s2->normal)))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("points",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackListType<Point  >(s2->points))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("Duckiebot.Segment",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> Segment_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<Segment > ret=RR_MAKE_SHARED<Segment >();
ret->color=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"color")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->pixels_normalized=RobotRaconteur::rr_cast<RobotRaconteur::RRList<Vector2D  > >((RRGetNode()->UnpackListType<Vector2D  >(RobotRaconteur::MessageElement::FindElement(m->Elements,"pixels_normalized")->CastData<RobotRaconteur::MessageElementList >())));
ret->normal=RobotRaconteur::rr_cast<Vector2D >(RRGetNode()->UnpackStructure(RobotRaconteur::MessageElement::FindElement(m->Elements,"normal")->CastData<RobotRaconteur::MessageElementStructure>()));
ret->points=RobotRaconteur::rr_cast<RobotRaconteur::RRList<Point  > >((RRGetNode()->UnpackListType<Point  >(RobotRaconteur::MessageElement::FindElement(m->Elements,"points")->CastData<RobotRaconteur::MessageElementList >())));
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Pixel_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<Pixel > s2=RobotRaconteur::rr_cast<Pixel >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("u",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->u))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("v",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->v))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("Duckiebot.Pixel",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> Pixel_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<Pixel > ret=RR_MAKE_SHARED<Pixel >();
ret->u=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"u")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->v=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"v")->CastData<RobotRaconteur::RRArray<int32_t > >());
return ret;
}


}

