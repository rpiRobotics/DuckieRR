//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "Duckiebot__LineDetector_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace Duckiebot
{
namespace LineDetector
{
std::string Duckiebot__LineDetectorFactory::GetServiceName()
{
return "Duckiebot.LineDetector";
}
std::string Duckiebot__LineDetectorFactory::DefString()
{
std::string out(
"#Service to provide interface to Duckiebots Detected Lines\n"
"service Duckiebot.LineDetector\n"
"\n"
"option version 0.8\n"
"\n"
"import Duckiebot\n"
"\n"
"object LineDetector\n"
"property Duckiebot.Segment{list} segments\n"
"\n"
"# likely want some way of clients only checking when new segments found.\n"
"#pipe Segment{list} segmentStream\n"
"event newSegments(Duckiebot.Segment{list} segs)\n"
"end object\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> Duckiebot__LineDetectorFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Duckiebot__LineDetectorFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "Duckiebot.LineDetector") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> Duckiebot__LineDetectorFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "Duckiebot.LineDetector") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> Duckiebot__LineDetectorFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "Duckiebot.LineDetector") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="LineDetector") { RR_SHARED_PTR<LineDetector_stub> o=(RR_MAKE_SHARED<LineDetector_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> Duckiebot__LineDetectorFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "Duckiebot.LineDetector") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="LineDetector") {RR_SHARED_PTR<LineDetector_skel> o=RR_MAKE_SHARED<LineDetector_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void Duckiebot__LineDetectorFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "Duckiebot.LineDetector") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> Duckiebot__LineDetectorFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "Duckiebot.LineDetector") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

LineDetector_stub::LineDetector_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void LineDetector_stub::RRInitStub()
{
}

RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > LineDetector_stub::get_segments()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"segments");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::rr_cast<RobotRaconteur::RRList<Duckiebot::Segment  > >((RRGetNode()->UnpackListType<Duckiebot::Segment  >(me->CastData<RobotRaconteur::MessageElementList >())));
}
void LineDetector_stub::set_segments(RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"segments");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackListType<Duckiebot::Segment  >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

boost::signals2::signal<void (RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > >)>& LineDetector_stub::get_newSegments()
{
return rrvar_newSegments;
}

void LineDetector_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
if (rr_m->MemberName=="newSegments")
{
RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > segs=RobotRaconteur::rr_cast<RobotRaconteur::RRList<Duckiebot::Segment  > >((RRGetNode()->UnpackListType<Duckiebot::Segment  >(rr_m->FindElement("segs")->CastData<RobotRaconteur::MessageElementList >())));
get_newSegments()(segs);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void LineDetector_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void LineDetector_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>LineDetector_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string LineDetector_stub::RRType()
{
return "Duckiebot.LineDetector.LineDetector";
}
void LineDetector_stub::RRClose()
{
rrvar_newSegments.disconnect_all_slots();
ServiceStub::RRClose();
}

void LineDetector_stub::async_get_segments(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"segments");
AsyncProcessTransaction(m,boost::bind(&LineDetector_stub::rrend_get_segments, RobotRaconteur::rr_cast<LineDetector_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void LineDetector_stub::rrend_get_segments(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::rr_cast<RobotRaconteur::RRList<Duckiebot::Segment  > >((RRGetNode()->UnpackListType<Duckiebot::Segment  >(me->CastData<RobotRaconteur::MessageElementList >())));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void LineDetector_stub::async_set_segments(RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"segments");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackListType<Duckiebot::Segment  >(value))));
AsyncProcessTransaction(req,boost::bind(&LineDetector_stub::rrend_set_segments, RobotRaconteur::rr_cast<LineDetector_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void LineDetector_stub::rrend_set_segments(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void LineDetector_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<Duckiebot::LineDetector::LineDetector > LineDetector_skel::get_obj()
{
return RobotRaconteur::rr_cast<Duckiebot::LineDetector::LineDetector >(uncastobj);
}
RR_SHARED_PTR<Duckiebot::LineDetector::async_LineDetector > LineDetector_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<Duckiebot::LineDetector::async_LineDetector >(uncastobj);
}
void LineDetector_skel::ReleaseCastObject() 
{
}
std::string LineDetector_skel::GetObjectType()
{
return "Duckiebot.LineDetector.LineDetector";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> LineDetector_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<Duckiebot::LineDetector::async_LineDetector > async_obj=get_asyncobj();
if (m->MemberName == "segments")
{
if (async_obj)
{
RR_WEAK_PTR<Duckiebot::LineDetector::LineDetector_skel> wp=RobotRaconteur::rr_cast<Duckiebot::LineDetector::LineDetector_skel>(shared_from_this());
async_obj->async_get_segments(boost::bind(&Duckiebot::LineDetector::LineDetector_skel::rr_get_segments,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > value=get_obj()->get_segments();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackListType<Duckiebot::Segment  >(value))));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> LineDetector_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<Duckiebot::LineDetector::async_LineDetector > async_obj=get_asyncobj();
if (m->MemberName == "segments")
{
RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > value=RobotRaconteur::rr_cast<RobotRaconteur::RRList<Duckiebot::Segment  > >((RRGetNode()->UnpackListType<Duckiebot::Segment  >(m->FindElement("value")->CastData<RobotRaconteur::MessageElementList >())));
if (async_obj)
{
RR_WEAK_PTR<Duckiebot::LineDetector::LineDetector_skel> wp=RobotRaconteur::rr_cast<Duckiebot::LineDetector::LineDetector_skel>(shared_from_this());
async_obj->async_set_segments(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_segments(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void LineDetector_skel::rr_get_segments(RR_WEAK_PTR<Duckiebot::LineDetector::LineDetector_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<Duckiebot::LineDetector::LineDetector_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackListType<Duckiebot::Segment  >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> LineDetector_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<Duckiebot::LineDetector::async_LineDetector > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void LineDetector_skel::rr_newSegments_Handler(RR_SHARED_PTR<RobotRaconteur::RRList<Duckiebot::Segment  > > segs)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mm=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_EventReq,"newSegments");
rr_mm->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("segs",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackListType<Duckiebot::Segment  >(segs))));
SendEvent(rr_mm);
}
void LineDetector_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<Duckiebot::LineDetector::LineDetector > obj=RobotRaconteur::rr_cast<Duckiebot::LineDetector::LineDetector >(rrobj1);
newSegments_rrconnection=obj->get_newSegments().connect(boost::bind(&LineDetector_skel::rr_newSegments_Handler, RobotRaconteur::rr_cast<LineDetector_skel>(shared_from_this()), _1));
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void LineDetector_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
newSegments_rrconnection.disconnect();
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> LineDetector_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void LineDetector_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<Duckiebot::LineDetector::LineDetector > obj=RobotRaconteur::rr_cast<Duckiebot::LineDetector::LineDetector >(rrobj1);
}

void LineDetector_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> LineDetector_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void LineDetector_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<Duckiebot::LineDetector::LineDetector > obj=RobotRaconteur::rr_cast<Duckiebot::LineDetector::LineDetector >(rrobj1);
}

void LineDetector_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> LineDetector_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void LineDetector_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<Duckiebot::LineDetector::LineDetector > obj=RobotRaconteur::rr_cast<Duckiebot::LineDetector::LineDetector >(o);
}
RR_SHARED_PTR<void> LineDetector_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> LineDetector_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}
}

