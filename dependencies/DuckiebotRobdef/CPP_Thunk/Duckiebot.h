//This file is automatically generated. DO NOT EDIT!

#include <RobotRaconteur.h>
#include <boost/signals2.hpp>
#pragma once

namespace Duckiebot
{

class Image;
class CameraInfo;
class Vector2D;
class Point;
class Segment;
class Pixel;

class Image : public RobotRaconteur::RRStructure {
public:
std::string format;
int32_t width;
int32_t height;
RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > data;

virtual std::string RRType() {return "Duckiebot.Image";  }
};

class CameraInfo : public RobotRaconteur::RRStructure {
public:
int32_t width;
int32_t height;
std::string distortion_model;
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > D;
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > K;
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > R;
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > P;

virtual std::string RRType() {return "Duckiebot.CameraInfo";  }
};

class Vector2D : public RobotRaconteur::RRStructure {
public:
double x;
double y;

virtual std::string RRType() {return "Duckiebot.Vector2D";  }
};

class Point : public RobotRaconteur::RRStructure {
public:
double x;
double y;
double z;

virtual std::string RRType() {return "Duckiebot.Point";  }
};

class Segment : public RobotRaconteur::RRStructure {
public:
uint8_t color;
RR_SHARED_PTR<RobotRaconteur::RRList<Vector2D  > > pixels_normalized;
RR_SHARED_PTR<Vector2D > normal;
RR_SHARED_PTR<RobotRaconteur::RRList<Point  > > points;

virtual std::string RRType() {return "Duckiebot.Segment";  }
};

class Pixel : public RobotRaconteur::RRStructure {
public:
int32_t u;
int32_t v;

virtual std::string RRType() {return "Duckiebot.Pixel";  }
};

namespace DuckiebotConstants 
{
    static const uint8_t WHITE=0;
    static const uint8_t YELLOW=1;
    static const uint8_t RED=2;
}
}

